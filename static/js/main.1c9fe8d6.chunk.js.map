{"version":3,"sources":["components/Wrapper/index.js","components/Header/index.js","components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Header","highscore","score","Card","onClick","clickCount","id","alt","name","src","image","App","state","images","gameEnd","setState","forEach","count","alert","find","x","i","console","log","this","sort","Math","random","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ivCAUeA,MANf,SAAiBC,GAEb,OAAO,yBAAKC,UAAU,WAAWD,EAAME,WCgB5BC,G,MAlBA,SAAAH,GAAK,OAEhB,yBAAKC,UAAU,UAEX,yBAAKA,UAAU,SAASD,EAAME,UAE9B,yBAAKD,UAAU,cAAf,eACiBD,EAAMI,WAGvB,yBAAKH,UAAU,SAAf,UACYD,EAAMK,UCGXC,G,MAdF,SAAAN,GAAK,OAEd,yBAAKC,UAAU,OAAOM,QAAS,kBAAMP,EAAMQ,WAAWR,EAAMS,MAExD,yBAAKR,UAAU,QAEX,yBAAKS,IAAKV,EAAMW,KAAMC,IAAKZ,EAAMa,Y,OCwF9BC,G,iNAxFbC,MAAQ,CAENC,SACAZ,UAAW,EACXC,MAAO,G,EAITY,QAAU,WAqBR,OAnBI,EAAKF,MAAMV,MAAQ,EAAKU,MAAMX,WAEhC,EAAKc,SAAS,CAAEd,UAAW,EAAKW,MAAMV,QAAS,eAIjD,EAAKU,MAAMC,OAAOG,SAAQ,SAAAN,GAExBA,EAAMO,MAAQ,KAIhBC,MAAM,8OAAD,OAGkD,EAAKN,MAAMV,QAElE,EAAKa,SAAS,CAAEb,MAAO,KAEhB,G,EAITG,WAAa,SAAAC,GAEX,EAAKM,MAAMC,OAAOM,MAAK,SAACC,EAAGC,GAEzB,GAAID,EAAEd,KAAOA,EAAI,CAEf,GAAwB,IAApBO,EAAOQ,GAAGJ,MAYZ,OAVAJ,EAAOQ,GAAGJ,MAAQJ,EAAOQ,GAAGJ,MAAQ,EAEpC,EAAKF,SAAS,CAAEb,MAAO,EAAKU,MAAMV,MAAQ,IAAK,WAE7CoB,QAAQC,IAAIC,KAAKZ,MAAMV,UAIzB,EAAKU,MAAMC,OAAOY,MAAK,kBAAMC,KAAKC,SAAW,OAEtC,EAIP,EAAKb,e,wEAOH,IAAD,OACP,OAEE,kBAAC,EAAD,KAEE,kBAAC,EAAD,CAAQZ,MAAOsB,KAAKZ,MAAMV,MAAOD,UAAWuB,KAAKZ,MAAMX,WAAvD,eAECuB,KAAKZ,MAAMC,OAAOe,KAAI,SAAAlB,GAAK,OAE1B,kBAAC,EAAD,CAEEL,WAAY,EAAKA,WACjBC,GAAII,EAAMJ,GACVuB,IAAKnB,EAAMJ,GACXI,MAAOA,EAAMA,gB,GA9EPoB,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1c9fe8d6.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n\r\n    return <div className=\"wrapper\">{props.children}</div>;\r\n\r\n}\r\n\r\nexport default Wrapper;","\r\nimport React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Header = props => (\r\n\r\n    <div className=\"header\">\r\n\r\n        <div className=\"title\">{props.children}</div>\r\n        \r\n        <div className=\"high-score\">\r\n            High Score: {props.highscore}\r\n        </div>\r\n        \r\n        <div className=\"score\">\r\n            Score: {props.score}\r\n        </div>\r\n\r\n    </div>\r\n\r\n);\r\n\r\nexport default Header;","\r\nimport React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Card = props => (\r\n\r\n    <div className=\"card\" onClick={() => props.clickCount(props.id)}>\r\n\r\n        <div className=\"imgs\">\r\n\r\n            <img alt={props.name} src={props.image} />\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n);\r\n\r\nexport default Card;","\nimport React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Card from \"./components/Card\";\nimport images from \"./images.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n\n  state = {\n\n    images,\n    highscore: 0,\n    score: 0\n\n  };\n\n  gameEnd = () => {\n\n    if (this.state.score > this.state.highscore) {\n\n      this.setState({ highscore: this.state.score }, function () { });\n\n    }\n\n    this.state.images.forEach(image => {\n\n      image.count = 0;\n\n    });\n\n    alert(`                                               Game Over\n                                                Try Again! \n                                                         \n                                                  Score: ${this.state.score}`);\n\n    this.setState({ score: 0 });\n\n    return true;\n\n  }\n\n  clickCount = id => {\n\n    this.state.images.find((x, i) => {\n\n      if (x.id === id) {\n\n        if (images[i].count === 0) {\n\n          images[i].count = images[i].count + 1;\n\n          this.setState({ score: this.state.score + 1 }, function () {\n\n            console.log(this.state.score);\n\n          });\n\n          this.state.images.sort(() => Math.random() - 0.5)\n\n          return true;\n\n        } else {\n\n          this.gameEnd();\n\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n\n      <Wrapper>\n\n        <Header score={this.state.score} highscore={this.state.highscore}>Clicky Game</Header>\n\n        {this.state.images.map(image => (\n\n          <Card\n\n            clickCount={this.clickCount}\n            id={image.id}\n            key={image.id}\n            image={image.image}\n\n          />\n\n        ))}\n\n      </Wrapper>\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}